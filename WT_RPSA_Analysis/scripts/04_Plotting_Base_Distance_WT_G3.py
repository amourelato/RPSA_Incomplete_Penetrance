"""
Exports the hamming distance between every possible pairwise combination of WT RPSA carrying haplotypes for individuals in G3

Requirements:
- numpy==1.26.0
- pandas==2.1.1
- matplotlib==3.8.4
- seaborn==0.13.2

"""

import pandas as pd 
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from pathlib import Path
from path_utils import get_workflow_dir

def main():
    """
    Obtain number of genetic positions that differ between all pairwise combinations of WT RPSA haplotypes of members of G3
    Export the results as a heatmap

    The function:
    - Reads in the WT haplotypes CSV file generated by script 01.
    - Reads in the Hamming distance CSV file generated by script 01.
    - Subsets the Hamming distances to just individuals in G3 as obtained in script 03.
    - Obtains the number of genetic positions at which pairwise compared WT haplotypes differ by multiplying the Hamming distance by the number of genetic positions considered
    - Exports the base distance as a heatmap
    """

    workflow_dir = get_workflow_dir()

    #read in hamming distance for all sequenced individuals
    Hamming_Distance_path = workflow_dir / 'data' / 'Distance_Haplotype_Intermediate_Files' / 'Hamming_Distance_WT_Haplotypes.csv'
    Hamming_Distance_all = pd.read_csv(Hamming_Distance_path, sep=",", index_col=0)
    #Hamming_Distance_all.index = Hamming_Distance_all.columns

    #read in pedigree file and create a list of family lists
    WT_path = workflow_dir / 'data' / 'Distance_Haplotype_Intermediate_Files' / 'WT_Haplotypes.csv'
    WT_seq = pd.read_csv(WT_path, sep= ",")

    #multiply the Hamming distance by the number of genetic positions that differed between any two individuals (base distance)
    Hamming_Distance_all = Hamming_Distance_all*len(WT_seq)


    #create a list of individuals in G3 in an order that matches their ICA code in alphabetical order, obtained from 03_Grouping_WT_at_rep_pos.py
    H3_Individuals_Ordered = ["JM5049", "JM5048", "JM5050", 
                            "JL5542", "JL5535", "JL5539", "JL5541", "JL5536", "JL5537", 
                            "JM4509",	"JM4510", 
                            "JM9145", "JM9375", "JM9146",
                            "JM4505", "JM4504", 
                            "JM4496", "JM4495", "JM4497",
                            "JM4517",
                            "JL5544",
                            "JM5053", 
                            "JM8465",
                            "JM8467",
                            "JM4489", "JM4488", "JM4491"]

    #create a list of individuals in G3 in an order that matches their ICA code in alphabetical order
    H3_Individuals_Ordered_ICA_Names = ["A-I-2", "A-II-3", "A-II-4", 
                            "AG-III-4", "AG-III-9", "AG-III-11", "AG-III-15", "AG-IV-5", "AG-IV-6", 
                            "AV-II-1",	"AV-III-2", 
                            "AX-II-3", "AX-III-2", "AX-III-3", 
                            "BP-I-2", "BP-II-1", 
                            "BT-II-4", "BT-III-1", "BT-III-2",
                            "BU-II-1",
                            "BV-III-2",
                            "C-II-4", 
                            "CH-I-2",
                            "CI-I-2",
                            "H-I-2", "H-III-4", "H-III-6"]


    #subset to just individuals in G3
    Hamming_Distance_G3 = Hamming_Distance_all.loc[H3_Individuals_Ordered, H3_Individuals_Ordered]

    #round distances to nearest integer (although they should be just integers)
    Hamming_Distance_G3_int = Hamming_Distance_G3.round().astype(int)

    #rename columns and rows to ICA codes to keep consistent with all other figrues
    Hamming_Distance_G3_int.index = H3_Individuals_Ordered_ICA_Names
    Hamming_Distance_G3_int.columns = H3_Individuals_Ordered_ICA_Names

    # Plot the base distances
    mask = np.triu(np.ones_like(Hamming_Distance_G3_int, dtype=bool), k=1)
    cmap = sns.diverging_palette(100, 7, s=75, l=40,
                                n=5, center="light", as_cmap=True)

    plt.figure(figsize=(30, 12))
    sns.heatmap(Hamming_Distance_G3_int, mask=mask, center=0, annot=True,
                fmt='d', square=True, cmap='coolwarm')

    #export plotted base distances 
    output_dir = workflow_dir / 'Results' / 'WT_RPSA_G3_Base_Distance'
    plt.savefig(output_dir / "Base_Distance_G3.pdf", bbox_inches='tight')

if __name__ == "__main__":
    main()